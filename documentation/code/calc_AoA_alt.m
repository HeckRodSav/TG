function return_struct = calc_AoA(...)
	Rho = d/(2*sin(pi / N_antenas));
	ant_angles = % ...
	ant_array = Rho * exp(i * deg2rad(ant_angles));

	Z_phase_array = arrayfun(@(a) phase_z(...), ant_array);
	[Z_x_array angle_Z_A_x_B_array] = arrayfun( ...
		@(a, b) dephase_A_to_B(a, b), ... );

	[delta_A_x_B delta_B_x_A] = arrayfun( ...
		@(ang, a, b) deltas_A_B(ang, a, b), ... );

	range_angle = pi/(2*(N_antenas+1));

	angle_vector = [delta_A_x_B delta_B_x_A];
	angle_vector = [...]; % Normalização

	angle_vector_round = ...
		round(angle_vector./range_angle).*range_angle;

	target_angle = mode(angle_vector_round);

	angle_vector = angle_vector(abs(target_angle ...
	 - angle_vector) <= range_angle );

	choose_angle = median(angle_vector);

	return_struct = { ...
		choose_angle ...
		Rho ...
		ant_array ...
		Z_phase_array ...
		Z_x_array ...
		delta_A_x_B ...
		delta_B_x_A ...
	};

end %function